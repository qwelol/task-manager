{"version":3,"sources":["components/List-item.tsx","components/List.tsx","components/Card.tsx","components/Create-form.tsx","shared/Default-tasks.ts","components/Task-manager.tsx","App.jsx","reportWebVitals.js","index.js"],"names":["ListItem","props","className","type","onChange","checked","value","List","items","tasks","map","task","index","selectItem","id","selected","createForm","Card","header","children","CreateForm","useState","setValue","onSubmit","e","preventDefault","onReset","currentTarget","maxLength","DEFAULT_TASKS","completed","TaskManager","setTasks","addition","setAddition","useEffect","item","localStorage","getItem","savedTasks","JSON","parse","setItem","stringify","setCompletion","newTasks","toggleTaskSelection","closeAddition","completedTasks","filter","activeTasks","form","newTask","Math","max","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAEe,SAASA,EAASC,GAC/B,OACE,oBAAIC,UAAU,kBAAd,SACE,wBAAOA,UAAU,aAAjB,UACE,uBACEA,UAAU,mBACVC,KAAK,WACLC,SAAUH,EAAMG,SAChBC,QAASJ,EAAMI,UAEjB,+BAAOJ,EAAMK,aCTN,SAASC,EAAKN,GAC3B,IAAMO,EAAQP,EAAMQ,MAAMC,KAAI,SAACC,EAAMC,GAAP,OAC5B,cAACZ,EAAD,CACEM,MAAOK,EAAKL,MAEZF,SAAU,WACRH,EAAMY,WAAWF,EAAKG,KAExBT,QAASM,EAAKI,UAJTH,MAQT,OACE,qBAAIV,UAAU,aAAd,UACGM,EACAP,EAAMe,YACL,oBAAId,UAAU,0BAAd,SAAyCD,EAAMe,gBChBxC,SAASC,EAAKhB,GAC3B,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SAA8BD,EAAMiB,SACpC,qBAAKhB,UAAU,YAAf,SACE,cAACK,EAAD,CACEE,MAAOR,EAAMQ,MACbI,WAAYZ,EAAMY,WAClBG,WAAYf,EAAMe,eAGtB,qBAAKd,UAAU,qBAAf,SAAqCD,EAAMkB,cCXlC,SAASC,EAAWnB,GACjC,MAA0BoB,mBAAS,IAAnC,mBAAOf,EAAP,KAAcgB,EAAd,KAMA,OACE,uBACEpB,UAAU,OACVqB,SAAU,SAACC,GACTA,EAAEC,iBACFxB,EAAMsB,SAASjB,GACfgB,EAAS,KAEXI,QAAS,WACPzB,EAAMyB,UACNJ,EAAS,KATb,UAYE,uBAAOpB,UAAU,aAAjB,SAA+BD,EAAMiB,SACrC,uBACEf,KAAK,OACLD,UAAU,eACVI,MAAOA,EACPF,SAtBe,SAACoB,GACpBF,EAASE,EAAEG,cAAcrB,QAsBrBsB,UAAW,MAEb,gCACE,uBAAO1B,UAAU,kBAAkBC,KAAK,SAASG,MAAM,iBACvD,uBAAOJ,UAAU,wBAAwBC,KAAK,QAAQG,MAAM,+CC/B7D,IAAMuB,EAAwB,CACnC,CACEf,GAAI,EACJR,MAAO,SACPwB,WAAW,EACXf,UAAU,GAEZ,CACED,GAAI,EACJR,MAAO,SACPwB,WAAW,EACXf,UAAU,GAEZ,CACED,GAAI,EACJR,MAAO,SACPwB,WAAW,EACXf,UAAU,ICbC,SAASgB,IACtB,MAA0BV,mBAAiB,IAA3C,mBAAOZ,EAAP,KAAcuB,EAAd,KACA,EAAgCX,oBAAS,GAAzC,mBAAOY,EAAP,KAAiBC,EAAjB,KAEAC,qBAAU,WACR,IAAMC,EAAOC,aAAaC,QAAQ,gBAC5BC,EAAqBH,EAAOI,KAAKC,MAAML,GAAQP,EACrDG,EAASO,KACR,IAEHJ,qBAAU,WACRE,aAAaK,QAAQ,eAAgBF,KAAKG,UAAUlC,MACnD,CAACA,IAEJ,IAAMmC,EAAgB,SAACtC,GACrB,IAAMuC,EAAWpC,EAAMC,KAAI,SAACC,GAI1B,OAHIA,EAAKI,WACPJ,EAAKmB,UAAYxB,GAEZK,KAGTqB,EAASa,IAeLC,EAAsB,SAAChC,GAC3BkB,EACEvB,EAAMC,KAAI,SAACC,GAAD,OACRA,EAAKG,KAAOA,EAAZ,2BAAsBH,GAAtB,IAA4BI,UAAWJ,EAAKI,WAAaJ,OAuBzDoC,EAAgB,WACpBb,GAAY,IAGRc,EAAiBvC,EAAMwC,QAAO,SAACtC,GAAD,OAAUA,EAAKmB,aAC7CoB,EAAczC,EAAMwC,QAAO,SAACtC,GAAD,OAAWA,EAAKmB,aAU7CqB,EAAOlB,EAPT,cAACb,EAAD,CACEF,OAAO,sEACPK,SA5Be,SAACjB,GAClB,GAAIA,EAAO,CACT,IACM8C,EAAU,CACdtC,GAFYuC,KAAKC,IAAL,MAAAD,KAAI,YAAQ5C,EAAMC,KAAI,SAACC,GAAD,OAAUA,EAAKG,QAErC,EACZR,QACAwB,WAAW,EACXf,UAAU,GAEZiB,EAAS,GAAD,mBAAKvB,GAAL,CAAY2C,KACpBL,MAmBArB,QAASqB,IAIsB,KAEnC,OACE,sBAAK7C,UAAU,MAAf,UACE,qBAAKA,UAAU,WAAf,SACE,eAACe,EAAD,CACEC,OAAO,wFACPT,MAAOyC,EACPlC,WAAYmC,EACZtC,WAAYiC,EAJd,UAME,wBACE3C,KAAK,SACLD,UAAU,kBACVqD,QAnEY,WACpBX,GAAc,IA+DR,oEAOA,wBACEzC,KAAK,SACLD,UAAU,sBACVqD,QAxCa,WACrBrB,GAAaD,IAoCP,8DAOA,wBACE9B,KAAK,SACLD,UAAU,qBACVqD,QAzEU,WAClBvB,EAASvB,EAAMwC,QAAO,SAACtC,GAAD,OAAUA,EAAKmB,YAAcnB,EAAKI,cAqElD,6DASJ,qBAAKb,UAAU,WAAf,SACE,cAACe,EAAD,CACEC,OAAO,0GACPT,MAAOuC,EACPhC,WAAY,KACZH,WAAYiC,EAJd,SAME,wBACE3C,KAAK,SACLD,UAAU,kBACVqD,QA7FW,WACnBX,GAAc,IAyFR,6FClHKY,MARf,WACE,OACE,qBAAKtD,UAAU,oBAAf,SACE,cAAC6B,EAAD,OCMS0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d62a7a83.chunk.js","sourcesContent":["import ListItemProps from \"../models/list-item-props\";\n\nexport default function ListItem(props: ListItemProps) {\n  return (\n    <li className=\"list-group-item\">\n      <label className=\"form-check\">\n        <input\n          className=\"form-check-input\"\n          type=\"checkbox\"\n          onChange={props.onChange}\n          checked={props.checked}\n        />\n        <span>{props.value}</span>\n      </label>\n    </li>\n  );\n}\n","import ListProps from \"../models/list-props\";\nimport ListItem from \"./List-item\";\n\nexport default function List(props: ListProps) {\n  const items = props.tasks.map((task, index) => (\n    <ListItem\n      value={task.value}\n      key={index}\n      onChange={(): void => {\n        props.selectItem(task.id);\n      }}\n      checked={task.selected}\n    />\n  ));\n\n  return (\n    <ul className=\"list-group\">\n      {items}\n      {props.createForm && (\n        <li className=\"list-group-item drop-in\">{props.createForm}</li>\n      )}\n    </ul>\n  );\n}\n","import List from \"./List\";\nimport CardProps from \"../models/card-props\";\n\nexport default function Card(props: CardProps) {\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">{props.header}</div>\n      <div className=\"card-body\">\n        <List\n          tasks={props.tasks}\n          selectItem={props.selectItem}\n          createForm={props.createForm}\n        />\n      </div>\n      <div className=\"card-body controls\">{props.children}</div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport CreateFormProps from \"../models/Create-form-props\";\n\nexport default function CreateForm(props: CreateFormProps) {\n  const [value, setValue] = useState(\"\");\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>): void => {\n    setValue(e.currentTarget.value);\n  };\n\n  return (\n    <form\n      className=\"mt-3\"\n      onSubmit={(e): void => {\n        e.preventDefault();\n        props.onSubmit(value);\n        setValue(\"\");\n      }}\n      onReset={(): void => {\n        props.onReset();\n        setValue(\"\");\n      }}\n    >\n      <label className=\"form-label\">{props.header}</label>\n      <input\n        type=\"text\"\n        className=\"form-control\"\n        value={value}\n        onChange={handleChange}\n        maxLength={280}\n      />\n      <div>\n        <input className=\"btn btn-success\" type=\"submit\" value=\"Ок\" />\n        <input className=\"btn btn-secondary m-1\" type=\"reset\" value=\"Отмена\" />\n      </div>\n    </form>\n  );\n}\n","import Task from \"../models/task-model\";\n\nexport const DEFAULT_TASKS: Task[] = [\n  {\n    id: 1,\n    value: \"Task 1\",\n    completed: true,\n    selected: false,\n  },\n  {\n    id: 2,\n    value: \"Task 2\",\n    completed: true,\n    selected: false,\n  },\n  {\n    id: 3,\n    value: \"Task 3\",\n    completed: false,\n    selected: false,\n  },\n];\n","import { useEffect, useState } from \"react\";\nimport Card from \"./Card\";\nimport CreateForm from \"./Create-form\";\nimport { DEFAULT_TASKS } from \"../shared/Default-tasks\";\nimport Task from \"../models/task-model\";\n\nexport default function TaskManager() {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [addition, setAddition] = useState(false);\n\n  useEffect((): void => {\n    const item = localStorage.getItem(\"task-manager\");\n    const savedTasks: Task[] = item ? JSON.parse(item) : DEFAULT_TASKS;\n    setTasks(savedTasks);\n  }, []);\n\n  useEffect((): void => {\n    localStorage.setItem(\"task-manager\", JSON.stringify(tasks));\n  }, [tasks]);\n\n  const setCompletion = (value: boolean): void => {\n    const newTasks = tasks.map((task) => {\n      if (task.selected) {\n        task.completed = value;\n      }\n      return task;\n    });\n\n    setTasks(newTasks);\n  };\n\n  const completeTasks = (): void => {\n    setCompletion(true);\n  };\n\n  const restoreTasks = (): void => {\n    setCompletion(false);\n  };\n\n  const removeTasks = (): void => {\n    setTasks(tasks.filter((task) => task.completed || !task.selected));\n  };\n\n  const toggleTaskSelection = (id: number): void => {\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, selected: !task.selected } : task\n      )\n    );\n  };\n\n  const createTask = (value: string): void => {\n    if (value) {\n      const maxID = Math.max(...tasks.map((task) => task.id));\n      const newTask = {\n        id: maxID + 1,\n        value,\n        completed: false,\n        selected: false,\n      };\n      setTasks([...tasks, newTask]);\n      closeAddition();\n    }\n  };\n\n  const toggleAddition = (): void => {\n    setAddition(!addition);\n  };\n\n  const closeAddition = (): void => {\n    setAddition(false);\n  };\n\n  const completedTasks = tasks.filter((task) => task.completed);\n  const activeTasks = tasks.filter((task) => !task.completed);\n\n  const createForm = (\n    <CreateForm\n      header=\"Новая задача\"\n      onSubmit={createTask}\n      onReset={closeAddition}\n    />\n  );\n\n  let form = addition ? createForm : null;\n\n  return (\n    <div className=\"row\">\n      <div className=\"col w-50\">\n        <Card\n          header=\"Активные задачи\"\n          tasks={activeTasks}\n          createForm={form}\n          selectItem={toggleTaskSelection}\n        >\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            onClick={completeTasks}\n          >\n            Завершить\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary m-1\"\n            onClick={toggleAddition}\n          >\n            Добавить\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-danger m-1\"\n            onClick={removeTasks}\n          >\n            Удалить\n          </button>\n        </Card>\n      </div>\n      <div className=\"col w-50\">\n        <Card\n          header=\"Завершенные задачи\"\n          tasks={completedTasks}\n          createForm={null}\n          selectItem={toggleTaskSelection}\n        >\n          <button\n            type=\"button\"\n            className=\"btn btn-warning\"\n            onClick={restoreTasks}\n          >\n            Восстановить\n          </button>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","import \"./App.css\";\nimport TaskManager from \"./components/Task-manager\";\n\nfunction App() {\n  return (\n    <div className=\"App container-xxl\">\n      <TaskManager />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}